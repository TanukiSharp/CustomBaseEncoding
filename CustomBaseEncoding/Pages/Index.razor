@page "/"
@inject NavigationManager navigationManager

@using CustomBaseEncoding.Core;
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using System.Web;
@using System.Text;

<div class="root-container">
    <div class="left pane">
        <div class="toolbar">
            <div class="input-type">
                <span>Input type:</span>
                <select @bind="InputType" @oninput="OnInputTypeChanged">
                    <option value="0">UTF8 text</option>
                    <option value="1">Hexadecimal</option>
                </select>
            </div>
        </div>
        <textarea class="input" @oninput="OnInputChanged">@InputData</textarea>
    </div>
    <div class="right pane">
        <textarea class="output" readonly>@OutputData</textarea>
    </div>
</div>

@code
{
    private int InputType { get; set; }

    private string? InputData { get; set; }
    private string? OutputData { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var uriBuilder = new UriBuilder(navigationManager.Uri);

        if (string.IsNullOrWhiteSpace(uriBuilder.Query))
            return;

        var parsedQuery = HttpUtility.ParseQueryString(uriBuilder.Query);

        if (int.TryParse(parsedQuery.Get("t"), out int inputType) == false)
            return;

        string? base62Data = parsedQuery.Get("d");

        if (string.IsNullOrWhiteSpace(base62Data))
            return;

        byte[] binaryData = CustomBaseEncoding.Decode(base62Data.Trim(), Alphabets.Base62Alphabet);

        InputType = inputType;

        if (inputType == 0)
            InputData = Encoding.UTF8.GetString(binaryData);
        else
            InputData = Convert.ToHexString(binaryData);

        SetInputBinaryData(binaryData);
    }

    private void OnInputTypeChanged(ChangeEventArgs e)
    {
        if (e.Value is string v)
            InputType = int.Parse(v);

        ProcessInputTextData();
    }

    private void OnInputChanged(ChangeEventArgs e)
    {
        InputData = e.Value as string;

        ProcessInputTextData();
    }

    private void UpdateUrl(byte[] binaryData)
    {
        var uriBuilder = new UriBuilder(navigationManager.Uri);

        uriBuilder.Query = $"?t={InputType}&d={CustomBaseEncoding.Encode(binaryData, Alphabets.Base62Alphabet)}";

        navigationManager.NavigateTo(uriBuilder.Uri.ToString(), false);
    }

    private void ProcessInputTextData()
    {
        if (InputData == null)
            return;

        OutputData = string.Empty;

        byte[] binaryData;

        if (InputType == 0)
            binaryData = Encoding.UTF8.GetBytes(InputData);
        else if (InputType == 1)
            binaryData = FromTextArrayData(InputData);
        else
            return;

        UpdateUrl(binaryData);

        SetInputBinaryData(binaryData);
    }

    private void SetInputBinaryData(byte[] binaryData)
    {
        string convertedData = CustomBaseEncoding.Encode(binaryData, Alphabets.Base62Alphabet);

        OutputData = convertedData;
    }

    private static bool IsHexa(char c)
    {
        return c >= '0' && c <= '9' || c >= 'a' && c <= 'f' || c >= 'A' && c <= 'F';
    }

    private static bool IsHexaString(string str)
    {
        if (str.Length % 2 != 0)
            return false;

        foreach (char c in str)
        {
            if (IsHexa(c) == false)
                return false;
        }

        return true;
    }

    private static byte[] FromTextArrayData(string data)
    {
        data = data.Trim();

        if (data.StartsWith("[]byte"))
            data = data[6..].TrimStart();

        data = data.Trim('{', '}', '[', ']');

        data = data.Trim();

        string[] values = data.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        var result = new List<byte>();

        foreach (string strValue in values)
        {
            string mutableStrValue = strValue;

            if (strValue.StartsWith("0x", StringComparison.OrdinalIgnoreCase))
                mutableStrValue = mutableStrValue[2..];

            if (IsHexaString(mutableStrValue) == false)
                return Array.Empty<byte>();

            result.AddRange(Convert.FromHexString(mutableStrValue));
        }

        return result.ToArray();
    }
}
